{"version":3,"sources":["reducers/index.js","reducers/BlogPostReducer.js","reducers/BlogUserReducer.js","api/jasonPlaceHolder.js","components/BlogImage.js","components/BlogAuthor.js","actions/index.js","components/BlogPost.js","components/App.js","serviceWorker.js","index.js"],"names":["combineReducers","posts","state","arguments","length","undefined","action","type","payload","users","concat","Object","toConsumableArray","axios","create","baseURL","BlogImage","react_default","a","createElement","className","src","alt","Component","BlogAuthor","this","props","fetchUser","userID","user","name","connect","ownProps","find","id","dispatch","jasonPlaceHolder","get","then","response","data","BlogPost","fetchPost","map","post","key","components_BlogImage","imageId","title","body","components_BlogAuthor","userId","app","components_BlogPost","Boolean","window","location","hostname","match","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","render","es","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4NAGeA,cAAgB,CAC7BC,MCJa,WAAwB,IAAvBC,EAAuBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAf,GAAIG,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACnC,OAAQC,EAAOC,MACX,IAAK,aACD,OAAOD,EAAOE,QAClB,QACI,OAAON,IDAjBO,MELa,WAAsB,IAArBP,EAAqBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAf,GAAIG,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACnC,OAAQC,EAAOC,MACb,IAAK,aACH,SAAAG,OAAAC,OAAAC,EAAA,EAAAD,CAAWT,GAAX,CAAkBI,EAAOE,UAC3B,QACE,OAAON,iDCHEW,WAAMC,OAAO,CAC1BC,QAAS,yCCSIC,mLARX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,qCAAqCC,IAAI,kBAJlCC,aCElBC,8LAEFC,KAAKC,MAAMC,UAAUF,KAAKC,MAAME,yCAGzB,IACCC,EAASJ,KAAKC,MAAdG,KACR,OAAKA,EAIHZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,cACZS,EAAKC,OANH,YARYP,aA2BVQ,cANS,SAAC7B,EAAO8B,GAC9B,MAAO,CACLH,KAAM3B,EAAMO,MAAMwB,KAAK,SAAAJ,GAAI,OAAIA,EAAKK,KAAOF,EAASJ,WAMtD,CAAED,UCxBqB,SAAAO,GAAE,OAAI,SAAAC,GAAQ,OACrCC,EAAiBC,IAAjB,UAAA3B,OAA+BwB,IAAMI,KAAK,SAAAC,GACxCJ,EAAS,CACP5B,KAAM,aACNC,QAAS+B,EAASC,YDkBTT,CAGbP,GE5BIiB,8LAEFhB,KAAKC,MAAMgB,6CAIX,OAAOjB,KAAKC,MAAMzB,MAAM0C,IAAI,SAAAC,GAC1B,OACE3B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOyB,IAAKD,EAAKV,IAC9BjB,EAAAC,EAAAC,cAAC2B,EAAD,CAAWC,QAASH,EAAKV,KACzBjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAUwB,EAAKI,OAC9B/B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAewB,EAAKK,OAErChC,EAAAC,EAAAC,cAAC+B,EAAD,CAAYtB,OAAQgB,EAAKO,mBAdZ5B,aA2BRQ,cANS,SAAA7B,GACtB,MAAO,CACLD,MAAOC,EAAMD,QAMf,CAAEyC,UDlCqB,kBAAM,SAAAP,GAAQ,OACrCC,EAAiBC,IAAI,UAAUC,KAAK,SAAAC,GAClCJ,EAAS,CACP5B,KAAM,aACNC,QAAS+B,EAASC,YC4BTT,CAGbU,GCtBaW,SAVH,WACV,OACEnC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAACkC,EAAD,UCIYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVN,IAAMC,EAAQC,YAAYC,EAAUC,YAAiBC,MACrDC,IAASC,OACPhD,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CAAUP,MAAOA,GACf1C,EAAAC,EAAAC,cAACgD,EAAD,OAEFC,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlC,KAAK,SAAAmC,GACjCA,EAAaC","file":"static/js/main.99fb0556.chunk.js","sourcesContent":["import { combineReducers } from \"redux\";\r\nimport BlogPostReducer from \"./BlogPostReducer\";\r\nimport BlogUserReducer from \"./BlogUserReducer\";\r\nexport default combineReducers({\r\n  posts: BlogPostReducer,\r\n  users: BlogUserReducer\r\n});\r\n","export default (state = [], action) => {\r\n    switch (action.type) {\r\n        case \"FETCH_POST\":\r\n            return action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","export default (state=[], action) => {\r\n  switch (action.type) {\r\n    case \"FETCH_USER\":\r\n      return [...state, action.payload];\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import axios from \"axios\";\r\n\r\nexport default axios.create({\r\n  baseURL: \"https://jsonplaceholder.typicode.com\"\r\n});\r\n","import React, { Component } from \"react\";\r\n\r\nclass BlogImage extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"image\">\r\n        <img src=\"https://source.unsplash.com/random\" alt=\"Dummy\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BlogImage;\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { fetchUser } from \"../actions\";\r\n\r\nclass BlogAuthor extends Component {\r\n  componentDidMount() {\r\n    this.props.fetchUser(this.props.userID);\r\n  }\r\n\r\n  render() {\r\n    const { user } = this.props;\r\n    if (!user) {\r\n      return null;\r\n    }\r\n    return (\r\n      <div className=\"extra content\">\r\n        <span>\r\n          <i className=\"user icon\" />\r\n          {user.name}\r\n        </span>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return {\r\n    user: state.users.find(user => user.id === ownProps.userID)\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { fetchUser }\r\n)(BlogAuthor);\r\n","import jasonPlaceHolder from \"../api/jasonPlaceHolder\";\r\nexport const fetchPost = () => dispatch =>\r\n  jasonPlaceHolder.get(\"/posts\").then(response => {\r\n    dispatch({\r\n      type: \"FETCH_POST\",\r\n      payload: response.data\r\n    });\r\n  });\r\n\r\nexport const fetchUser = id => dispatch =>\r\n  jasonPlaceHolder.get(`/users/${id}`).then(response => {\r\n    dispatch({\r\n      type: \"FETCH_USER\",\r\n      payload: response.data\r\n    });\r\n  });\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { fetchPost } from \"../actions\";\r\nimport BlogImage from \"./BlogImage\";\r\nimport BlogAuthor from \"./BlogAuthor\";\r\n\r\nclass BlogPost extends Component {\r\n  componentDidMount() {\r\n    this.props.fetchPost();\r\n  }\r\n\r\n  render() {\r\n    return this.props.posts.map(post => {\r\n      return (\r\n        <div className=\"card\" key={post.id}>\r\n          <BlogImage imageId={post.id} />\r\n          <div className=\"content\">\r\n            <div className=\"header\">{post.title}</div>\r\n            <div className=\"description\">{post.body}</div>\r\n          </div>\r\n          <BlogAuthor userID={post.userId} />\r\n        </div>\r\n      );\r\n    });\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    posts: state.posts\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { fetchPost }\r\n)(BlogPost);\r\n","import React from \"react\";\nimport BlogPost from \"./BlogPost\";\nimport \"./App.css\";\n\nconst app = () => {\n  return (\n    <div className=\"ui container App\">\n      <div className=\"ui cards Card\">\n        <BlogPost />\n      </div>\n    </div>\n  );\n};\n\nexport default app;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware  } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport reducers from \"./reducers\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nconst store = createStore(reducers, applyMiddleware (thunk));\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}